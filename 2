#include <iostream>
#include <fstream>
#include <sstream>
#include <vector>
#include <ctime>

struct FileInfo {
    std::string name;
    std::string extension;
    std::string createdDateTime;
    std::string lastModifiedDateTime;
    int imageWidth;
    int imageHeight;
    int numLines;
    int numWords;
    int numChars;
    int numClasses;
    int numMethods;
};

class FolderMonitor {
private:
    std::string folderPath;
    std::time_t snapshotTime;
    std::vector<FileInfo> files;

public:
    FolderMonitor(const std::string& path) : folderPath(path), snapshotTime(std::time(nullptr)) {}

    void commit() {
        snapshotTime = std::time(nullptr);
        std::cout << "Snapshot updated. Folder is now clean.\n";
    }

    void info(const std::string& fileName) {
        for (const auto& file : files) {
            if (file.name == fileName) {
                printFileInfo(file);
                return;
            }
        }
        std::cout << "File not found: " << fileName << "\n";
    }

    void state() {
        std::cout << "Current Snapshot Time: " << std::asctime(std::localtime(&snapshotTime));

        for (const auto& file : files) {
            std::cout << file.name << " - ";
            if (file.lastModifiedDateTime > std::asctime(std::localtime(&snapshotTime))) {
                std::cout << "Modified\n";
            } else {
                std::cout << "Not modified\n";
            }
        }
    }

    void scanFolder() {
        

        std::cout << "Folder scanned. Use 'commit' to update snapshot time.\n";
    }

private:
    void printFileInfo(const FileInfo& file) {
        std::cout << "Name: " << file.name << "\n";
        std::cout << "Extension: " << file.extension << "\n";
        std::cout << "Created Date Time: " << file.createdDateTime << "\n";
        std::cout << "Last Modified Date Time: " << file.lastModifiedDateTime << "\n";

        if (file.extension == "png" || file.extension == "jpg") {
            std::cout << "Image Size: " << file.imageWidth << "x" << file.imageHeight << "\n";
        } else if (file.extension == "txt") {
            std::cout << "Number of Lines: " << file.numLines << "\n";
            std::cout << "Number of Words: " << file.numWords << "\n";
            std::cout << "Number of Characters: " << file.numChars << "\n";
        } else if (file.extension == "py" || file.extension == "java") {
            std::cout << "Number of Lines: " << file.numLines << "\n";
            std::cout << "Number of Classes: " << file.numClasses << "\n";
            std::cout << "Number of Methods: " << file.numMethods << "\n";
        }

        std::cout << "------------------------\n";
    }
};

int main() {
    FolderMonitor folderMonitor("/path/to/your/folder");

    std::string userInput;
    while (true) {
        std::cout << "Enter command: ";
        std::getline(std::cin, userInput);

        std::istringstream iss(userInput);
        std::string command;
        iss >> command;

        if (command == "commit") {
            folderMonitor.commit();
        } else if (command == "info") {
            std::string fileName;
            iss >> fileName;
            folderMonitor.info(fileName);
        } else if (command == "state") {
            folderMonitor.state();
        } else if (command == "scan") {
            folderMonitor.scanFolder();
        } else if (command == "exit") {
            break;
        } else {
            std::cout << "Invalid command. Try again.\n";
        }
    }

    return 0;
}
